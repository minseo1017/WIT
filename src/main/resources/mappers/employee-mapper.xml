<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="employee">

	<!-- 모든 직급 정보 가져오기(회원가입) -->
	<select id="AllRoles" resultType="com.wit.dto.RoleDTO">
		SELECT role_code, role_title
		FROM role
	</select>

	<!-- 모든 부서 정보 가져오기(회원가입) -->
	<select id="AllDepts" resultType="com.wit.dto.DeptDTO">
		SELECT dept_code, dept_title
		FROM dept
	</select>

	<!-- 입사 순서대로 부서코드 생성을 위한 DB 조회 (사번 생성) -->
	<select id="getHighestEmployeeIDByDept" parameterType="string"
		resultType="string">
		SELECT emp_no
		FROM (
		SELECT emp_no,
		ROW_NUMBER() OVER
		(PARTITION BY dept_code ORDER BY TO_NUMBER(SUBSTR(emp_no, -2)) DESC)
		as rnk
		FROM employee
		WHERE dept_code = #{dept_code}
		)
		WHERE rnk = 1
	</select>

	<!-- 회원가입 -->
	<insert id="register" parameterType="com.wit.dto.EmployeeDTO">
		INSERT INTO employee (
		emp_no,
		pw, name, dept_code, role_code, join_date, nickname, ssn,
		phone,
		email,
		zip_code, address, detail_address
		) VALUES (
		#{emp_no},
		#{pw},
		#{name}, #{dept_code}, #{role_code}, SYSDATE, ' ', ' ', ' ', '
		', ' ',
		'
		', ' '
		)
	</insert>

	<!-- 로그인 -->
	<select id="login" resultType="com.wit.dto.EmployeeDTO">
		SELECT e.emp_no, e.pw, e.name,
		r.role_title AS role_code
		FROM employee e
		JOIN role r ON e.role_code =
		r.role_code
		WHERE e.emp_no = #{emp_no} AND e.pw = #{pw}
	</select>

	<!-- 직원 정보 조회 -->
	<select id="employeeInfo" resultType="com.wit.dto.EmployeeDTO">
		SELECT
		e.name AS NAME,
		r.role_title AS ROLE_CODE,
		d.dept_title AS DEPT_CODE
		FROM
		Employee e
		JOIN
		Role r ON e.role_code = r.role_code
		JOIN
		Dept d ON e.dept_code = d.dept_code
		WHERE
		e.emp_no = #{emp_no}
	</select>

	<!-- 추가 정보 업데이트 를 위한 직원 정보 조회 -->
	<!-- 마이페이지 조회 -->
	<select id="findByEmpNo" resultType="com.wit.dto.EmployeeDTO">
		SELECT e.emp_no, e.pw,
		e.name, e.nickname,
		CASE
		WHEN SUBSTR(e.ssn, 8, 1) IN ('1', '2') THEN
		'19' || SUBSTR(e.ssn, 1, 2) ||
		'년' || SUBSTR(e.ssn, 3, 2) || '월' ||
		SUBSTR(e.ssn, 5, 2) || '일'
		WHEN SUBSTR(e.ssn, 8, 1) IN ('3', '4') THEN
		'20' || SUBSTR(e.ssn, 1, 2) ||
		'년' || SUBSTR(e.ssn, 3, 2) || '월' ||
		SUBSTR(e.ssn, 5, 2) || '일'
		ELSE NULL
		END AS ssn,
		e.phone, e.email,
		e.zip_code, e.address, e.detail_address,
		d.dept_title AS dept_code,
		r.role_title AS role_code,
		e.join_date, e.quit_date, e.quit_yn
		FROM
		employee e
		JOIN dept d ON e.dept_code = d.dept_code
		JOIN role r ON
		e.role_code = r.role_code
		WHERE e.emp_no = #{emp_no}
	</select>

	<!-- 추가 정보 업데이트 -->
	<update id="updateInfo" parameterType="com.wit.dto.EmployeeDTO">
		UPDATE employee
		SET
		nickname = #{nickname}, ssn = #{ssn}, phone = #{phone}, email =
		#{email},
		zip_code = #{zip_code}, address = #{address}, detail_address
		=
		#{detail_address}, pw = #{pw}
		WHERE emp_no = #{emp_no}
	</update>

	<!-- ID찾기 -->
	<select id="findID" parameterType="map"
		resultType="com.wit.dto.EmployeeDTO">
		SELECT emp_no FROM employee WHERE name = #{name} AND ssn =
		#{ssn}
	</select>

	<!-- PW찾기 (수정) -->
	<update id="modifyPassword" parameterType="map">
		UPDATE employee SET pw
		= #{newPassword} WHERE emp_no = #{emp_no}
	</update>

	<!-- 마이페이지 정보 업데이트 - 비밀번호 -->
	<update id="updatePassword"
		parameterType="com.wit.dto.EmployeeDTO">
		UPDATE employee
		SET pw = #{pw, jdbcType=VARCHAR}
		WHERE
		emp_no = #{emp_no, jdbcType=VARCHAR}
	</update>

	<!-- 마이페이지 정보 업데이트 - 닉네임 -->
	<update id="updateNickname"
		parameterType="com.wit.dto.EmployeeDTO">
		UPDATE employee
		SET nickname = #{nickname,
		jdbcType=VARCHAR}
		WHERE emp_no = #{emp_no, jdbcType=VARCHAR}
	</update>

	<!-- 닉네임 중복 체크(마이페이지) -->
	<select id="checkNickname" parameterType="string"
		resultType="int">
		SELECT COUNT(*) FROM employee WHERE nickname = #{nickname,
		jdbcType=VARCHAR}
	</select>

	<!-- 회원탈퇴 -->
	<delete id="delete" parameterType="String">
		DELETE FROM employee WHERE
		emp_no = #{emp_no}
	</delete>

	<!-- 부서별 사원 목록 조회 -->
	<select id="selectByDept"
		resultType="com.wit.dto.EmployeeInfoDTO">
		select
		emp_no, name, r.role_code as role_code, role_title
		from employee e
		join role r on e.role_code = r.role_code
		where
		dept_code
		= #{deptCode} and quit_yn = 'N'
		order by 3 desc
	</select>

	<!-- 사원의 이름과 부서명 조회 -->
	<select id="selectByEmpNo"
		resultType="com.wit.dto.EmployeeInfoDTO">
		select name, dept_title
		from employee e
		join dept d on
		e.dept_code = d.dept_code
		where emp_no = #{empNo}
	</select>

	<!-- 사원 이름 조회 -->
	<select id="getName" resultType="String">
		select name from employee where emp_no = #{empNo}
	</select>
	
	<!-- 사원 부서명 조회 -->
	<select id="getDept" resultType="String">
		select dept_title
		from employee e
		join dept d on
		e.dept_code = d.dept_code
		where emp_no = #{empNo}
	</select>

	<!-- PW찾기(수정) 을 위한 직원 정보 확인 -->
	<select id="findEmployee" parameterType="map"
		resultType="com.wit.dto.EmployeeDTO">
		SELECT * FROM employee WHERE emp_no = #{emp_no} AND name =
		#{name} AND ssn =
		#{ssn}
	</select>

	<!-- 직원 주소록 리스트 조회 -->
	<select id="getEmployeeAddressList" parameterType="map"
		resultType="map">
        <![CDATA[
		    select * from (
		    select 
		        em.*, 
		        d.dept_title,
		        r.role_title,
		        row_number() over (order by em.name asc) as rown
		    from 
		        employee em
		    left join
		        dept d on em.dept_code = d.dept_code
		    left join
		        role r on em.role_code = r.role_code
		    where
		    	1=1
		    ]]>
		<if test="chosung != null and chosung != ''">
		        <![CDATA[
		            and (
		                #{chosung} = '전체'
		                or (#{chosung} = 'ㄱ' and em.name >= '가' and em.name < '나')
		                or (#{chosung} = 'ㄴ' and em.name >= '나' and em.name < '다')
		                or (#{chosung} = 'ㄷ' and em.name >= '다' and em.name < '라')
		                or (#{chosung} = 'ㄹ' and em.name >= '라' and em.name < '마')
		                or (#{chosung} = 'ㅁ' and em.name >= '마' and em.name < '바')
		                or (#{chosung} = 'ㅂ' and em.name >= '바' and em.name < '사')
		                or (#{chosung} = 'ㅅ' and em.name >= '사' and em.name < '아')
		                or (#{chosung} = 'ㅇ' and em.name >= '아' and em.name < '자')
		                or (#{chosung} = 'ㅈ' and em.name >= '자' and em.name < '차')
		                or (#{chosung} = 'ㅊ' and em.name >= '차' and em.name < '카')
		                or (#{chosung} = 'ㅋ' and em.name >= '카' and em.name < '타')
		                or (#{chosung} = 'ㅌ' and em.name >= '타' and em.name < '파')
		                or (#{chosung} = 'ㅍ' and em.name >= '파' and em.name < '하')
		                or (#{chosung} = 'ㅎ' and em.name >= '하' and em.name < '힣')
		                or (#{chosung} = 'a-z' and regexp_like(em.name, '^[A-Za-z]'))
		                or (#{chosung} = '0-9' and regexp_like(em.name, '^[0-9]'))
		            )
		        ]]>
		</if>
		<if test="category != null and category != ''">
		        <![CDATA[
		            and d.dept_title = #{category}
		        ]]>
		</if>
		<![CDATA[order by em.name
		) 
		where rown between #{startNum} and #{endNum}
		]]>
	</select>

	<!-- 직원 주소록 검색 -->
	<select id="searchEmployeeAddressList" parameterType="map"
		resultType="com.wit.dto.EmployeeDTO">
		SELECT e.emp_no, e.name, e.phone, e.email, d.dept_title
		FROM employee e
		JOIN dept d ON e.dept_code = d.dept_code
		WHERE e.name
		LIKE #{keyword}%
		ORDER BY e.emp_no
		LIMIT #{cpage}, 10
	</select>

	<!-- 주소록 페이지네이션 총 카운트 -->
	<select id="totalCountPage" resultType="int">
		select count(*) from
		employee
	</select>

	<!-- 카테고리 목록 가져오기 -->
	<select id="getCategories" resultType="map">
		select * from dept
	</select>

	<!-- 주소록 데이터 가져오기 -->
	<select id="getContactByEmp_no" parameterType="string"
		resultType="map">
		select
		em.*,
		d.dept_title,
		r.role_title
		from
		employee em
		left join
		dept d on em.dept_code = d.dept_code
		left join
		role r on
		em.role_code = r.role_code
		where em.emp_no = #{emp_no}
	</select>

	<!-- 주소록 검색 페이지네이션 총 카운트 -->
	<select id="totalCountPageSearch" resultType="int">
		select count(*)
		from employee where name like '%'||#{keyword}||'%'
	</select>

	<!-- 주소록 검색 -->
	<select id="selectByCon" resultType="map">
    	<![CDATA[
		    select * from (
		        select 
		            em.*, 
		            d.dept_title,
		            row_number() over (order by em.name asc) as rown
		        from 
		            employee em
		        left join
		            dept d on em.dept_code = d.dept_code
		        where 
		            em.name like '%' || #{keyword} || '%'
		    )
		    where rown between #{startNum} and #{endNum}
		]]>
	</select>

	<!-- 메신저 주소록 목록 조회 -->
	<select id="getAllMessengerEmp" resultType="map">
		select emp_no, name,
		d.dept_title, r.role_title, phone, email
		from employee em
		left join
		dept
		d on em.dept_code = d.dept_code
		left join
		role r on em.role_code =
		r.role_code
		where
		emp_no != #{emp_no}
	</select>

	<!-- 메신저 주소록 상세 조회 -->
	<select id="getContactByEmpNo" resultType="map">
		select emp_no, name,
		d.dept_title, r.role_title, phone, email
		from employee em
		left join
	        dept d on em.dept_code = d.dept_code
	    left join
	        role r on em.role_code = r.role_code
	    where emp_no = #{emp_no}
    </select>
    
    <!--  메신저 emp_no 이름으로 변경 -->
	<select id="getEmployeeName" parameterType="String" resultType="String">
	    SELECT name FROM employee WHERE emp_no = #{emp_no}
	</select>

</mapper>
